-module(meal_consumer_controller,[Req,Session]).

-export([
        before_/1,
        show/2,
        add/2,
        edit/2,
        delete/2
        ]).

-include("trends_admin.hrl").
-include("trends.hrl").

before_(_Other)->

     trends_utils:before_session_action(Session).


show('GET', [])->

	 Page = case Req:query_param("page_get") of
            [] ->
                1;
            undefined ->
                1;
            _ ->
                list_to_integer(Req:query_param("page_get"))
             end,
      Count=boss_db:count(consumer),    
      Page_count=trends_utils:get_page_count(Count,?PAGE_MAX_ITEM),
      Offset = trends_utils:get_offset(Page), 
      %error_logger:info_msg("In ~p line ~p count=~p pages=~p max_item=~p Offset=~p~n",[?MODULE, ?LINE,Count,Page_count,?PAGE_MAX_ITEM, Offset]),
      List = boss_db:find(consumer, [], [{limit, ?PAGE_MAX_ITEM},
			{offset, Offset},
			{order_by, createtime}, {descending, true}]),
      %error_logger:info_msg("In ~p line ~p Page Page_count List ~p~n ~p~n ~p~n",[?MODULE, ?LINE,Page, Page_count ,List]),     
      Return=trends_utils:get_return_append([{consumerlist,List},{current_p,Page},
             {page_count,Page_count},{count,Count},{method_type, "get"}],Session),
    
      {ok,Return};


show('POST', [])->
 
     Page = case Req:post_param("page_post") of
            [] ->
                1;
            undefined ->
                1;
            _ ->
                list_to_integer(Req:post_param("page_post"))
           end,      
    S_Time=case Req:post_param("starttime") of
           [] ->[];
           undefined ->[];
           Vs->Vs

            end, 
     E_Time=case Req:post_param("endtime") of
           [] ->[];
           undefined ->[];
           Ve->Ve

            end, 
     Time=case (S_Time==[]) and (E_Time==[]) of
              true ->
                [];
              false->
                case (S_Time=/=[]) and (E_Time==[]) of
                      true->
                         [{createtime,'gt',S_Time}];
                      false->
                         case (S_Time==[]) and (E_Time=/=[]) of
                               true->
                                  [{createtime,'lt',E_Time}];
                               false->
                                  [{createtime,'in',{S_Time,E_Time}}]  
                         end      
                end      
           
          end,

     Name_=case Req:post_param("name") of
           [] ->lists:append([],Time);
           undefined ->lists:append([],Time);
           Name->lists:append([{name,'matches',Name}],Time)

       end,
   
      Email_=case Req:post_param("email") of
           [] ->lists:append([],Name_);
           undefined ->lists:append([],Name_);
           Email->lists:append([{email,'matches',Email}],Name_)

       end,
      Isused_=case Req:post_param("isused") of
           [] ->lists:append([],Email_);
           undefined ->lists:append([],Email_);
           Isused->lists:append([{isused,'equals',Isused}],Email_)

       end,
      P=case Req:post_param("phone") of
           [] ->lists:append([],Isused_);
           undefined ->lists:append([],Isused_);
           Phone->lists:append([{phone,'matches',Phone}],Isused_)

       end, 
      N=case Req:post_param("desc") of
           [] ->lists:append([],P);
           undefined ->lists:append([],P);
           Desc ->lists:append([{note,'matches',Desc}],P)

        end, 
 
      Count=boss_db:count(consumer,N),    
      Page_count=trends_utils:get_page_count(Count,?PAGE_MAX_ITEM),
      Offset = trends_utils:get_offset(Page), 
      %error_logger:info_msg("In ~p line ~p count=~p pages=~p max_item=~p Offset=~p~n",[?MODULE, ?LINE,Count,Page_count,?PAGE_MAX_ITEM, Offset]),
      List = boss_db:find(consumer, N, [{limit, ?PAGE_MAX_ITEM},
			{offset, Offset},
			{order_by, createtime}, {descending, true}]),
      QE=[{starttime,Req:post_param("starttime")},{endtime,Req:post_param("endtime")},{phone,Req:post_param("phone")},
          {name_,Req:post_param("name")},{isused,Req:post_param("isused")},
          {email,Req:post_param("email")},{desc,Req:post_param("desc")}],
      Append=lists:append([{sellerlist,List},{current_p,Page},{page_count,Page_count},{method_type, "post"},{count, Count}],QE),
      Return=trends_utils:get_return_append(Append,Session),
      {ok,Return}.




add('GET', [])->
   Return=trends_utils:get_return_append([],Session),
   {ok,Return};
add('POST', [])->
	save("save").




edit('GET',[Id])->
       
	Consumer=boss_db:find(Id),
    error_logger:info_msg("In ~p line ~p Id=~p~n Consumer =>~p~n",[?MODULE, ?LINE, Id,Consumer]),
 	Return=trends_utils:get_return_append([{consumer,Consumer},{img_upload_url, ?IMGURL}],Session),
    {ok,Return};
edit('POST', [])->
	save("edit").

save(Type)->
	Name=Req:post_param("name"),
	Age=Req:post_param("age"),
	Sex=Req:post_param("sex"),
	Passwd=Req:post_param("passwd"),
	Avator=Req:post_param("icon"),
	Note=Req:post_param("note"),
	Email=Req:post_param("email"),
	Phone=Req:post_param("phone"),
	Salary=Req:post_param("salary"),
	Integration=Req:post_param("integration"),
        Isused=Req:post_param("isused"),
        Creator=Req:post_param("creator"),
	CreateTime = Req:post_param("createtime"),
	Timesec = Req:post_param("timesec"),	
	Fields=case Type of
		      "save"->
                     error_logger:info_msg(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>"),
                   [  {name,Name},
                      {age,0},
                      {sex, 2},
                      {passwd,Passwd},
                      {avator,""},
		      {note,""},
                      {email,""},
                      {phone,""},
                      {type,"consumer"},
                      {salary,0},
                      {integration,0},
                      {isused,"true"}, 
                      {creator,trends_utils:get_session_value(Session,name)},          
                      {createtime,trends_utils:get_datetime()},
                      {timesec,trends_utils:get_time_sec()}
                    ];
              "edit"->
                   Id=Req:post_param("id"),
                   
                   [  {id,Id},
                      {name,Name},
                      {age,Age},
                      {sex,Sex},
                      {passwd,Passwd},
                      {avator,Avator},
		      {note,Note},
                      {email,Email},
                      {phone,Phone},
                      {type,"consumer"},
                      {salary,Salary},
                      {integration,Integration},
                      {isused,Isused}, 
                      {creator,Creator},          
                      {createtime,CreateTime},
                      {timesec,Timesec}
                    ]
	       end,
	Consumer = boss_record:new(consumer,Fields), 
         error_logger:info_msg(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>~p~n",[[Consumer:age(),Consumer:sex()]]),
	case Consumer:save() of
         {ok,_}->
                  {json,[{result,"ok"}]};  
         
          _  ->
                  {json,[{result,"error"}]}
	end.

delete('POST', [])->
	Id = Req:post_param("id"),
    %error_logger:info_msg("In ~p line ~p Userid =~p~n",[?MODULE, ?LINE, Userid]),
    Ids=string:tokens(Id,","),
	[begin 
        case catch boss_db:delete(NewId) of 
            ok -> ok; 
            Err->Err 
        end
     end || NewId <- Ids],
	{json,[{result,"ok"}]}.








      

